diff --git a/Makefile.in b/Makefile.in
index aeabdc2..f6b8c2f 100644
--- a/Makefile.in
+++ b/Makefile.in
@@ -61,7 +61,7 @@ else
   march := -march=@WITH_ARCH@
 endif
 is_32bit := $(findstring 32,$(march))
-mabi := -mabi=$(if $(is_32bit),ilp32,lp64)
+mabi := -mabi=$(if $(is_32bit),ilp32d,lp64d)
 
 # Installation directories
 
diff --git a/bbl/bbl.lds b/bbl/bbl.lds
index 26f5816..615c3dc 100644
--- a/bbl/bbl.lds
+++ b/bbl/bbl.lds
@@ -43,15 +43,10 @@ SECTIONS
   _etext = .;
 
   /*--------------------------------------------------------------------*/
-  /* HTIF, isolated onto separate page                                  */
+  /* HTIF I/Os                                                          */
   /*--------------------------------------------------------------------*/
-  . = ALIGN(0x1000);
-  .htif :
-  {
-    PROVIDE( __htif_base = .);
-    *(.htif)
-  }
-  . = ALIGN(0x1000);
+  tohost = 0x40008000;
+  fromhost = 0x40008008;
 
   /*--------------------------------------------------------------------*/
   /* Initialized data segment                                           */
diff --git a/machine/fdt.c b/machine/fdt.c
index e8a504f..260fae8 100644
--- a/machine/fdt.c
+++ b/machine/fdt.c
@@ -646,8 +646,12 @@ static bool hart_filter_mask(const struct hart_filter *filter)
 {
   if (filter->mmu_type == NULL) return true;
   if (strcmp(filter->status, "okay")) return true;
+#if __riscv_xlen == 32
+  if (!strcmp(filter->mmu_type, "riscv,sv32")) return false;
+#else
   if (!strcmp(filter->mmu_type, "riscv,sv39")) return false;
   if (!strcmp(filter->mmu_type, "riscv,sv48")) return false;
+#endif
   printm("hart_filter_mask saw unknown hart type: status=\"%s\", mmu_type=\"%s\"\n",
          filter->status, filter->mmu_type);
   return true;
diff --git a/machine/htif.c b/machine/htif.c
index aae8c56..360cbb4 100644
--- a/machine/htif.c
+++ b/machine/htif.c
@@ -7,19 +7,12 @@
 #include "syscall.h"
 #include <string.h>
 
-extern uint64_t __htif_base;
-volatile uint64_t tohost __attribute__((section(".htif")));
-volatile uint64_t fromhost __attribute__((section(".htif")));
+volatile extern uint64_t tohost;
+volatile extern uint64_t fromhost;
 volatile int htif_console_buf;
 static spinlock_t htif_lock = SPINLOCK_INIT;
 uintptr_t htif;
 
-#define TOHOST(base_int)	(uint64_t *)(base_int + TOHOST_OFFSET)
-#define FROMHOST(base_int)	(uint64_t *)(base_int + FROMHOST_OFFSET)
-
-#define TOHOST_OFFSET		((uintptr_t)tohost - (uintptr_t)__htif_base)
-#define FROMHOST_OFFSET		((uintptr_t)fromhost - (uintptr_t)__htif_base)
-
 static void __check_fromhost()
 {
   uint64_t fh = fromhost;
@@ -91,7 +84,7 @@ void htif_syscall(uintptr_t arg)
 
 void htif_console_putchar(uint8_t ch)
 {
-#if __riscv_xlen == 32
+#if __riscv_xlen == 32 && 0
   // HTIF devices are not supported on RV32, so proxy a write system call
   volatile uint64_t magic_mem[8];
   magic_mem[0] = SYS_write;
diff --git a/machine/htif.h b/machine/htif.h
index a4e5e8e..e06440a 100644
--- a/machine/htif.h
+++ b/machine/htif.h
@@ -5,14 +5,9 @@
 
 #include <stdint.h>
 
-#if __riscv_xlen == 64
 # define TOHOST_CMD(dev, cmd, payload) \
   (((uint64_t)(dev) << 56) | ((uint64_t)(cmd) << 48) | (uint64_t)(payload))
-#else
-# define TOHOST_CMD(dev, cmd, payload) ({ \
-  if ((dev) || (cmd)) __builtin_trap(); \
-  (payload); })
-#endif
+
 #define FROMHOST_DEV(fromhost_value) ((uint64_t)(fromhost_value) >> 56)
 #define FROMHOST_CMD(fromhost_value) ((uint64_t)(fromhost_value) << 8 >> 56)
 #define FROMHOST_DATA(fromhost_value) ((uint64_t)(fromhost_value) << 16 >> 16)
diff --git a/machine/mentry.S b/machine/mentry.S
index 99e1b72..1aae2c1 100644
--- a/machine/mentry.S
+++ b/machine/mentry.S
@@ -220,6 +220,46 @@ __trap_from_machine_mode:
   jal trap_from_machine_mode
   j restore_regs
 
+#define HTIF_TOHOST   0x40008000
+
+putstring:
+  li a2, HTIF_TOHOST
+  li a3, (1 << 24) | (1 << 16)
+1:      
+  lbu a1, (a0)
+  beqz a1, 2f
+/* Note: we use 32 bit accesses to work in all base isa modes */
+  sw a1, 0(a2)
+  sw a3, 4(a2)
+/* wait until the char is handled */
+3:      
+  lw a1, 0(a2)
+  lw a4, 4(a2)
+  or a1, a1, a4
+  bnez a1, 3b
+  addi a0, a0, 1
+  j 1b
+2:
+  ret
+fatal_error:
+  jal putstring
+  # exit the emulator if possible
+  li a2, HTIF_TOHOST
+  li a1, 1
+  sw a1, 0(a2)
+  sw zero, 4(a2)
+1:  
+  wfi
+  j 1b
+
+rv32_expected_str:
+  .asciz "Must run this program on a 32 bit RISCV CPU - aborting\n"
+rv64_expected_str:
+  .asciz "Must run this program on a 64 bit RISCV CPU - aborting\n"
+rv128_detected_str:
+  .asciz "128 bit RISCV CPU detected: setting XLEN to 64 bits\n"
+  .align 4
+  
 do_reset:
   li x1, 0
   li x2, 0
@@ -255,6 +295,41 @@ do_reset:
   li x31, 0
   csrw mscratch, x0
 
+  # check MXL value and abort if it is not what we expect
+  mv s0, a0
+  mv s1, a1
+  csrr a0, misa
+  bgez a0, misa_rv32
+#if __riscv_xlen == 32
+  la a0, rv32_expected_str
+  j fatal_error
+#else
+  slli a0, a0, 1
+  bgez a0, misa_ok
+  # we are on a 128 bit CPU: we force MXL to 64 bit as a test
+  la a0, rv128_detected_str
+  jal putstring
+  li a0, 1
+  li a1, 126
+  # cannot use slli because no 128 bit support in gas
+  sll a0, a0, a1 
+  csrc misa, a0
+  # also set MSTATUS.SXL and MSTATUS.UXL to 64 bits
+  li a0, (3 << 32) | (3 << 34)
+  csrs mstatus, a0
+  li a0, (1 << 32) | (1 << 34)
+  csrc mstatus, a0
+  j misa_ok
+#endif    
+misa_rv32:
+#if __riscv_xlen == 64
+  la a0, rv64_expected_str
+  j fatal_error
+#endif
+misa_ok:
+  mv a0, s0
+  mv a1, s1
+
   # write mtvec and make sure it sticks
   la t0, trap_vector
   csrw mtvec, t0
diff --git a/machine/minit.c b/machine/minit.c
index 953e1ba..fb6efbe 100644
--- a/machine/minit.c
+++ b/machine/minit.c
@@ -156,7 +156,7 @@ void init_first_hart(uintptr_t hartid, uintptr_t dtb)
   query_uart(dtb);
   query_uart16550(dtb);
   query_htif(dtb);
-  printm("bbl loader\r\n");
+  //  printm("bbl loader\r\n");
 
   hart_init();
   hls_init(0); // this might get called again from parse_config_string
diff --git a/machine/mtrap.c b/machine/mtrap.c
index e48d3d5..fd78793 100644
--- a/machine/mtrap.c
+++ b/machine/mtrap.c
@@ -35,8 +35,13 @@ static uintptr_t mcall_console_putchar(uint8_t ch)
 
 void putstring(const char* s)
 {
-  while (*s)
-    mcall_console_putchar(*s++);
+    int c;
+    while (*s) {
+        c = *s++;
+        if (c == '\n')
+            mcall_console_putchar('\r');
+        mcall_console_putchar(c);
+    }
 }
 
 void vprintm(const char* s, va_list vl)
diff --git a/pk/pk.lds b/pk/pk.lds
index 52a7239..8fb2e68 100644
--- a/pk/pk.lds
+++ b/pk/pk.lds
@@ -43,15 +43,10 @@ SECTIONS
   _etext = .;
 
   /*--------------------------------------------------------------------*/
-  /* HTIF, isolated onto separate page                                  */
+  /* HTIF I/Os                                                          */
   /*--------------------------------------------------------------------*/
-  . = ALIGN(0x1000);
-  .htif :
-  {
-    PROVIDE( __htif_base = . );
-    *(.htif)
-  }
-  . = ALIGN(0x1000);
+  tohost = 0x40008000;
+  fromhost = 0x40008008;
 
   /*--------------------------------------------------------------------*/
   /* Initialized data segment                                           */
